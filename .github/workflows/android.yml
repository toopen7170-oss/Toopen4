name: Android APK
on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install deps (free)
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git zip unzip libffi-dev libssl-dev libsndfile1 curl openjdk-17-jdk rsync
          python -m pip install --upgrade pip
          python -m pip install buildozer cython==0.29.36 virtualenv

      - name: Setup env
        run: |
          echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=${{ github.workspace }}/.android/sdk" >> $GITHUB_ENV
          echo "PATH=/usr/lib/jvm/java-17-openjdk-amd64/bin:${{ github.workspace }}/.android/sdk/cmdline-tools/latest/bin:${{ github.workspace }}/.android/sdk/platform-tools:${PATH}" >> $GITHUB_ENV

      - name: Install Android SDK/NDK (cmdline-tools)
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          JAVA_HOME: ${{ env.JAVA_HOME }}
        run: |
          set -e
          mkdir -p "$ANDROID_SDK_ROOT"
          cd "$ANDROID_SDK_ROOT"
          curl -L -o cmdtools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          mkdir -p cmdline-tools
          unzip -q -o cmdtools.zip -d cmdline-tools
          if [ -d cmdline-tools/cmdline-tools ]; then mv -f cmdline-tools/cmdline-tools cmdline-tools/latest; fi
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$JAVA_HOME/bin:$PATH"
          yes | sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --licenses || true
          yes | sdkmanager --licenses || true
          sdkmanager --sdk_root="$ANDROID_SDK_ROOT" \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;33.0.2" \
            "build-tools;34.0.0" \
            "ndk;25.1.8937393" \
            "cmake;3.22.1"

      - name: Reset & copy internal SDK (real files + android stub)
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          set -e
          INTERNAL="$HOME/.buildozer/android/platform/android-sdk"
          rm -rf "$HOME/.buildozer/android/platform" || true
          mkdir -p "$INTERNAL/cmdline-tools/latest/bin" "$INTERNAL/tools/bin" "$INTERNAL/platform-tools" "$INTERNAL/build-tools"
          rsync -a "$ANDROID_SDK_ROOT/platform-tools/" "$INTERNAL/platform-tools/"
          rsync -a "$ANDROID_SDK_ROOT/build-tools/" "$INTERNAL/build-tools/"
          rsync -a "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/" "$INTERNAL/cmdline-tools/latest/bin/"
          cp "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" "$INTERNAL/tools/bin/sdkmanager"
          chmod +x "$INTERNAL/tools/bin/sdkmanager"
          cat > "$INTERNAL/tools/bin/android" << 'SH'
#!/usr/bin/env bash
DIR="$(cd "$(dirname "$0")" && pwd)"
if [ -x "$DIR/sdkmanager" ]; then
  "$DIR/sdkmanager" --help >/dev/null 2>&1 || true
  exit 0
fi
echo "android stub: sdkmanager not found" >&2
exit 0
SH
          chmod +x "$INTERNAL/tools/bin/android"

      - name: Cache .buildozer (free)
        uses: actions/cache@v4
        with:
          path: .buildozer
          key: buildozer-${{ runner.os }}-${{ hashFiles('buildozer.spec') }}

      - name: Build with Buildozer (pre-create log dir, log_level=2)
        env:
          ANDROIDSDK: $HOME/.buildozer/android/platform/android-sdk
          ANDROIDNDK: ${{ env.ANDROID_SDK_ROOT }}/ndk/25.1.8937393
          ANDROIDAPI: '34'
          NDKAPI: '23'
          PATH: $HOME/.buildozer/android/platform/android-sdk/build-tools/34.0.0:$HOME/.buildozer/android/platform/android-sdk/build-tools/33.0.2:${{ env.ANDROID_SDK_ROOT }}/platform-tools:${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/latest/bin:${{ env.PATH }}
        run: |
          set -e
          mkdir -p .buildozer
          buildozer --log-level=2 android debug 2>&1 | tee .buildozer/.full_build_output
          test -f bin/*.apk || exit 1

      - name: Upload APK (free artifact)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: toopen4-apk
          path: bin/*.apk

      - name: Extract 15-line error snippet (robust)
        if: failure()
        run: |
          mkdir -p error_snippet
          tail -n 15 .buildozer/android/platform/build-*/build/bootstraps/*/build.log > error_snippet/error_snippet_15.txt 2>/dev/null || \
          tail -n 15 .buildozer/android/platform/build-*/build/*.log > error_snippet/error_snippet_15.txt 2>/dev/null || \
          tail -n 15 .buildozer/.full_build_output > error_snippet/error_snippet_15.txt 2>/dev/null || \
          echo "[no logs] build stopped before logs were created" > error_snippet/error_snippet_15.txt
          zip -j error_snippet/WordMaster_error_snippet.zip error_snippet/error_snippet_15.txt

      - name: Upload error snippet (artifact)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-snippet-15
          path: |
            error_snippet/error_snippet_15.txt
            error_snippet/WordMaster_error_snippet.zip
